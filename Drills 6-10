#6 - Creating pairs 

function createPairs(arr) {
  for (let i = 0; i < arr.length; i++) {  //linear
    for (let j = i + 1; j < arr.length; j++) { //polynomial
      console.log(arr[i] + ', ' + arr[j]); //constant
    }
  }
}

The Big O here is 0(n^2) because there is a nested loop that would
require 2 levels of looping over an input



#7 - Compute the sequence

function compute(num) {
  let result = [];
  for (let i = 1; i <= num; i++) {

    if (i === 1) {
      result.push(0);
    }
    else if (i == 2) {
      result.push(1);
    }
    else {
      result.push(result[i - 2] + result[i - 3]);
    }
  }
  return result;
}

This algorithm computing a number where the results will be an array.
It will loop through the array and if the index is equal to 1 it will
push no results.  If the index is equal to 2 if will push the first result.
Or push the results of the array minus 2 location on the index.  Then it will 
return the result.

This is logarithmic complexity (O(log(n)) run time because it goes
through several rounds of the code cutting the code each time.

#8 An efficient search

function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}

The Big O here is O(n) because the array though sorted, is the same array.

#9 - Random element

function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

The Big O here is O(1) because though choosing a random number from the array 
it is still consistenly accessing the same array.

#10 - What am I?

function isWhat(n) {
    if (n < 2 || n % 1 != 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

The Big O here would be linear O(n)

